---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
    metricsServerAddon: enabled
    calicoCNIAddon: enabled
  name: "${CLUSTER_NAME}"
  namespace: "${CLUSTER_NAME}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - ${POD_CIDR_RANGE}
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
    kind: ProxmoxCluster
    name: "${CLUSTER_NAME}"
    namespace: "${CLUSTER_NAME}"
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    name: "${CLUSTER_NAME}-control-plane"
    namespace: "${CLUSTER_NAME}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: ProxmoxCluster
metadata:
  name: "${CLUSTER_NAME}"
  namespace: "${CLUSTER_NAME}"
spec:
  controlPlaneEndpoint:
    host: ${CONTROL_PLANE_ENDPOINT_IP}
    port: 6443
  ipv4Config:
    addresses: ${NODE_IP_RANGES}
    prefix: ${IP_PREFIX}
    gateway: ${GATEWAY}
  dnsServers: ${DNS_SERVERS}
  allowedNodes: ${ALLOWED_NODES:=[]}
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: "${CLUSTER_NAME}-control-plane"
  namespace: "${CLUSTER_NAME}"
spec:
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  machineTemplate:
    infrastructureRef:
      kind: ProxmoxMachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
      name: "${CLUSTER_NAME}-control-plane"
      namespace: "${CLUSTER_NAME}"
  kubeadmConfigSpec:
    users:
      - name: root
        sshAuthorizedKeys: [${VM_SSH_KEYS}]
    files:
      - content: |
          apiVersion: v1
          kind: Pod
          metadata:
            creationTimestamp: null
            name: kube-vip
            namespace: kube-system
          spec:
            containers:
            - args:
              - manager
              env:
              - name: cp_enable
                value: "true"
              - name: vip_interface
                value: ${VIP_NETWORK_INTERFACE=""}
              - name: address
                value: ${CONTROL_PLANE_ENDPOINT_IP}
              - name: port
                value: "6443"
              - name: vip_arp
                value: "true"
              - name: vip_leaderelection
                value: "true"
              - name: vip_leaseduration
                value: "15"
              - name: vip_renewdeadline
                value: "10"
              - name: vip_retryperiod
                value: "2"
              image: ghcr.io/kube-vip/kube-vip:v0.7.1
              imagePullPolicy: IfNotPresent
              name: kube-vip
              resources: {}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - NET_RAW
              volumeMounts:
              - mountPath: /etc/kubernetes/admin.conf
                name: kubeconfig
            hostAliases:
            - hostnames:
              - localhost
              - kubernetes
              ip: 127.0.0.1
            hostNetwork: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/admin.conf
                type: FileOrCreate
              name: kubeconfig
          status: {}
        owner: root:root
        path: /etc/kubernetes/manifests/kube-vip.yaml
      - path: /etc/kube-vip-prepare.sh
        content: |
          #!/bin/bash
          
          # Copyright 2020 The Kubernetes Authors.
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #     http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.
          
          set -e
          
          # Configure the workaround required for kubeadm init with kube-vip:
          # xref: https://github.com/kube-vip/kube-vip/issues/684
          
          # Nothing to do for kubernetes < v1.29
          KUBEADM_MINOR="$(kubeadm version -o short | cut -d '.' -f 2)"
          if [[ "$KUBEADM_MINOR" -lt "29" ]]; then
            exit 0
          fi
          
          IS_KUBEADM_INIT="false"
          
          # cloud-init kubeadm init
          if [[ -f /run/kubeadm/kubeadm.yaml ]]; then
            IS_KUBEADM_INIT="true"
          fi
          
          # ignition kubeadm init
          if [[ -f /etc/kubeadm.sh ]] && grep -q -e "kubeadm init" /etc/kubeadm.sh; then
            IS_KUBEADM_INIT="true"
          fi
          
          if [[ "$IS_KUBEADM_INIT" == "true" ]]; then
            sed -i 's#path: /etc/kubernetes/admin.conf#path: /etc/kubernetes/super-admin.conf#' \
              /etc/kubernetes/manifests/kube-vip.yaml
          fi
        owner: root:root
        permissions: "0700"
    preKubeadmCommands:
      - /etc/kube-vip-prepare.sh
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          provider-id: "proxmox://'{{ ds.meta_data.instance_id }}'"
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          provider-id: "proxmox://'{{ ds.meta_data.instance_id }}'"
  version: "${KUBERNETES_VERSION}"
---
kind: ProxmoxMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
metadata:
  name: "${CLUSTER_NAME}-control-plane"
  namespace: "${CLUSTER_NAME}"
spec:
  template:
    spec:
      sourceNode: "${PROXMOX_SOURCENODE}"
      templateID: ${TEMPLATE_VMID}
      format: "qcow2"
      full: true
      numSockets: ${CONTROL_PLANE_NUM_SOCKETS:=2}
      numCores: ${CONTROL_PLANE_NUM_CORES:=4}
      memoryMiB: ${CONTROL_PLANE_MEMORY_MIB:=16384}
      disks:
        bootVolume:
          disk: ${BOOT_VOLUME_DEVICE}
          sizeGb: ${CONTROL_PLANE_BOOT_VOLUME_SIZE:=100}
      network:
        default:
          bridge: ${BRIDGE}
          model: virtio
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
  name: "${CLUSTER_NAME}-workers"
  namespace: "${CLUSTER_NAME}"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels: null
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
        node-role.kubernetes.io/node: ""
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          name: "${CLUSTER_NAME}-worker"
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          namespace: "${CLUSTER_NAME}"
      infrastructureRef:
        name: "${CLUSTER_NAME}-worker"
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
        kind: ProxmoxMachineTemplate
        namespace: "${CLUSTER_NAME}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: ProxmoxMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-worker"
  namespace: "${CLUSTER_NAME}"
spec:
  template:
    spec:
      sourceNode: "${PROXMOX_SOURCENODE}"
      templateID: ${TEMPLATE_VMID}
      format: "qcow2"
      full: true
      numSockets: ${WORKER_NUM_SOCKETS:=2}
      numCores: ${WORKER_NUM_CORES:=4}
      memoryMiB: ${WORKER_MEMORY_MIB:=16384}
      disks:
        bootVolume:
          disk: ${BOOT_VOLUME_DEVICE}
          sizeGb: ${WORKER_BOOT_VOLUME_SIZE:=100}
      network:
        default:
          bridge: ${BRIDGE}
          model: virtio
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: "${CLUSTER_NAME}-worker"
  namespace: "${CLUSTER_NAME}"
spec:
  template:
    spec:
      clusterConfiguration:
        apiServer:
          certSANs:
          - "${CLUSTER_NAME}.local.zachary.day"
          extraArgs:
            service-account-key-file: /etc/kubernetes/pki/sa-custom.pub
            service-account-signing-key-file: /etc/kubernetes/pki/sa-custom.key
      files:
      - contentFrom:
          secret:
            name: service-account-signing-key
            key: sa.key
        owner: root:root
        path: /etc/kubernetes/pki/sa-custom.key
      - contentFrom:
          secret:
            name: service-account-signing-key
            key: sa.pub
        owner: root:root
        path: /etc/kubernetes/pki/sa-custom.pub
      users:
        - name: root
          sshAuthorizedKeys: [${VM_SSH_KEYS}]
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            provider-id: "proxmox://'{{ ds.meta_data.instance_id }}'"
